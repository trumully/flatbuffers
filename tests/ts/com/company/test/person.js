"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Person = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var Person = /** @class */ (function () {
    function Person() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Person.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Person.getRootAsPerson = function (bb, obj) {
        return (obj || new Person()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Person.getSizePrefixedRootAsPerson = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Person()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Person.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Person.prototype.age = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    };
    Person.startPerson = function (builder) {
        builder.startObject(2);
    };
    Person.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    Person.addAge = function (builder, age) {
        builder.addFieldInt16(1, age, 0);
    };
    Person.endPerson = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Person.finishPersonBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    Person.finishSizePrefixedPersonBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Person.createPerson = function (builder, nameOffset, age) {
        Person.startPerson(builder);
        Person.addName(builder, nameOffset);
        Person.addAge(builder, age);
        return Person.endPerson(builder);
    };
    return Person;
}());
exports.Person = Person;
